/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE  &kp Q        &kp W       &kp E       &kp R             &kp T        &kp Y    &kp U              &kp I                &kp O            &kp P                &kp BACKSLASH
&kp GRAVE   &mt LCTRL A  &mt LALT S  &mt LCMD D  &mt LEFT_SHIFT F  &kp G        &kp H    &mt RIGHT_SHIFT J  &mt RIGHT_COMMAND K  &mt RIGHT_ALT L  &mt RCTRL SEMICOLON  &kp SQT
&caps_word  &kp Z        &kp X       &kp C       &kp V             &kp B        &kp N    &kp M              &kp COMMA            &kp DOT          &kp FSLH             &kp MINUS
                                     &mo 2       &mo 1             &kp SPACE    &kp RET  &kp BACKSPACE      &kp TAB
            >;
        };

        lower_layer {
            bindings = <
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp N7          &kp N8        &kp NUMBER_9  &kp NUMBER_0              &trans
&trans  &trans        &trans        &trans        &trans        &trans          &kp NUMBER_1  &kp NUMBER_2    &kp NUMBER_3  &kp NUMBER_4  &kp N5                    &trans
&tog 4  &trans        &trans        &trans        &trans        &trans          &kp LEFT      &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT     &kp LC(LS(LEFT_BRACKET))  &kp LS(LC(RIGHT_BRACKET))
                                    &trans        &trans        &trans          &trans        &trans          &trans
            >;
        };

        raise_layer {
            bindings = <
&trans  &kp EXCL               &kp AT                 &kp HASH  &kp DLLR       &kp PRCNT            &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR     &trans
&trans  &kp LS(LA(MINUS))      &kp LA(LS(EQUAL))      &trans    &kp LS(LA(K))  &kp LC(LS(LA(K)))    &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp PAGE_UP  &kp PAGE_DOWN
&trans  &kp LS(LA(LC(MINUS)))  &kp LC(LS(LA(EQUAL)))  &trans    &kp LS(LA(J))  &kp LA(LS(LC(J)))    &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp HOME     &kp END
                                                      &trans    &trans         &trans               &trans     &trans     &trans
            >;
        };

        tri_layer {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_PLAY_PAUSE      &kp K_BACK            &kp K_NEXT      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE
&kp F11     &kp F1        &kp F2        &kp F3        &kp F4        &kp F5          &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))  &kp LS(LG(N5))  &trans             &trans           &trans
&kp F12     &kp F6        &kp F7        &kp F8        &kp F9        &kp F10         &trans                &trans                &trans          &trans             &trans           &trans
                                        &trans        &trans        &trans          &trans                &trans                &trans
            >;
        };

        mouse_layer {
            bindings = <
&trans  &trans         &trans  &trans  &kp R   &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp RIGHT_GUI  &kp S   &kp D   &kp F   &trans    &kp H   &kp J   &kp K   &kp L   &trans  &trans
&tog 4  &trans         &trans  &trans  &kp V   &kp B     &trans  &trans  &trans  &trans  &trans  &trans
                               &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        activate_tri {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};

