/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
            layers = <0 1 2 3>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
            layers = <0>;
        };

        combo_layer_4 {
            bindings = <&mo 4>;
            key-positions = <37 29>;
            layers = <0 1 2>;
        };

        combo_layer_3_left {
            bindings = <&mo 3>;
            key-positions = <36 28>;
            layers = <0 1 2>;
        };

        combo_layer_3_right {
            bindings = <&mo 3>;
            key-positions = <31 41>;
            layers = <0 1 2>;
        };

        comto_rightgui {
            bindings = <&kp RGUI>;
            key-positions = <30 40>;
        };
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R     &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P     &kp MINUS
&kp LCTRL  &kp A  &kp S  &kp D     &kp F     &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V     &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp BACKSLASH
                         &kp LALT  &kp LGUI  &kp SPACE    &kp RET  &none  &mo 2
            >;
        };

        lower_layer {
            bindings = <
&trans  &none         &kp N7        &kp N8        &kp N9        &kp CARET      &kp LEFT_BRACE   &kp RIGHT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LA(BACKSPACE)  &kp BACKSPACE
&trans  &none         &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp DOLLAR     &kp LEFT         &kp DOWN         &kp UP                &kp RIGHT              &kp PLUS           &kp MINUS
&trans  &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERCENT    &kp KP_MULTIPLY  &kp EQUAL        &kp COMMA             &kp DOT                &kp SLASH          &kp LG(Z)
                                    &trans        &trans        &kp SPACE      &kp ENTER        &trans           &trans
            >;
        };

        raise_layer {
            bindings = <
&kp GRAVE  &kp LC(LEFT)           &kp LC(RIGHT_ARROW)    &kp LC(LS(LEFT_BRACKET))  &kp LC(LS(RIGHT_BRACKET))  &none            &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LA(BACKSPACE)  &kp BACKSPACE
&kp TILDE  &kp LS(LA(MINUS))      &kp LS(LA(EQUAL))      &kp LC(LS(LA(K)))         &kp LS(LA(LC(J)))          &kp PAGE_UP      &kp HOME        &kp EXCLAMATION  &kp AT_SIGN       &kp HASH           &kp DOLLAR         &kp PERCENT
&trans     &kp LC(LS(LA(MINUS)))  &kp LS(LA(LC(EQUAL)))  &kp LS(LA(K))             &kp LS(LA(J))              &kp PAGE_DOWN    &kp END         &kp GRAVE        &kp TILDE         &kp CARET          &kp AMPERSAND      &kp LG(Z)
                                                         &trans                    &trans                     &kp ESCAPE       &kp RET         &trans           &trans
            >;
        };

        tri_layer {
            bindings = <
&trans  &bt BT_SEL 0          &bt BT_SEL 1          &bt BT_SEL 2              &bt BT_SEL 3              &bt BT_SEL 4            &kp C_PLAY_PAUSE  &kp K_BACK  &kp K_NEXT  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE
&trans  &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))  &kp LG(LC(LS(NUMBER_3)))  &kp LS(LC(LG(NUMBER_4)))  &kp LS(LG(NUMBER_5))    &kp F1            &kp F2      &kp F4      &kp F10            &none            &trans
&trans  &trans                &trans                &none                     &none                     &trans                  &none             &none       &kp F5      &kp F11            &none            &bt BT_CLR
                                                    &trans                    &trans                    &trans                  &trans            &trans      &trans
            >;
        };

        left_hand {
            bindings = <
&none  &none             &kp LG(NUMBER_7)  &kp LG(NUMBER_8)  &kp LG(NUMBER_9)  &none    &none  &none  &none  &none  &none  &none
&none  &none             &kp LG(NUMBER_4)  &kp LG(NUMBER_5)  &kp LG(NUMBER_6)  &none    &none  &none  &none  &none  &none  &none
&none  &kp LG(NUMBER_0)  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &none    &none  &none  &none  &none  &none  &none
                                           &none             &none             &none    &none  &none  &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
    };
};

