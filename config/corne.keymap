/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
            layers = <0 1 2>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
            layers = <0 1 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R     &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P     &kp MINUS
&kp LCTRL  &kp A  &kp S  &kp D     &kp F     &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V     &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp BACKSLASH
                         &kp LALT  &kp LGUI  &kp SPACE    &kp RET  &mo 1  &mo 2
            >;
        };

        lower_layer {
            bindings = <
&trans  &trans       &kp N7        &kp N8        &kp N9        &kp N0        &trans     &trans    &kp KP_MULTIPLY  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS     &kp BACKSPACE
&trans  &kp CARET    &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp DOLLAR    &kp LEFT   &kp DOWN  &kp UP           &kp RIGHT             &kp LC(LS(LEFT_BRACKET))  &kp LS(LC(RIGHT_BRACKET))
&trans  &kp PERCENT  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp LALT      &kp MINUS  &kp PLUS  &trans           &trans                &kp SLASH                 &trans
                                   &trans        &kp RGUI      &kp SPACE     &kp ENTER  &trans    &trans
            >;
        };

        raise_layer {
            bindings = <
&kp GRAVE  &kp EXCL               &kp AT                 &kp HASH  &kp DLLR           &kp PRCNT            &kp CARET      &kp AMPS   &kp KP_MULTIPLY  &kp LPAR          &kp RPAR           &kp BACKSPACE
&kp TILDE  &kp LS(LA(MINUS))      &kp LS(LA(EQUAL))      &trans    &kp LS(LA(LC(K)))  &kp LA(LC(LS(J)))    &kp PAGE_UP    &kp MINUS  &kp EQUAL        &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp HOME
&trans     &kp LC(LS(LA(MINUS)))  &kp LS(LA(LC(EQUAL)))  &trans    &kp LS(LA(K))      &kp LS(LA(J))        &kp PAGE_DOWN  &kp UNDER  &kp PLUS         &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp END
                                                         &trans    &trans             &kp ESCAPE           &kp RET        &trans     &trans
            >;
        };

        tri_layer {
            bindings = <
&trans   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_PLAY_PAUSE          &kp K_BACK                &kp K_NEXT      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE
&kp F11  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5          &kp LS(LG(NUMBER_3))      &kp LS(LG(NUMBER_4))      &kp LS(LG(N5))  &trans             &trans           &trans
&kp F12  &kp F6        &kp F7        &kp F8        &kp F9        &kp F10         &kp LS(LC(LG(NUMBER_3)))  &kp LS(LC(LG(NUMBER_4)))  &trans          &trans             &trans           &bt BT_CLR
                                     &trans        &trans        &trans          &trans                    &trans                    &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        activate_tri {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};

