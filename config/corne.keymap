/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    macros {
        arrow_key_big: arrow_key_big {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "ARROW_KEY_BIG";
        };

        arrow_key_small: arrow_key_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "ARROW_KEY_SMALL";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
            layers = <0 1 2 3>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
            layers = <0>;
        };

        combo_word_backspace {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <11 10>;
            layers = <0>;
        };

        combo_gui_layer4 {
            bindings = <&mo 4>;
            key-positions = <36 24>;
            layers = <0>;
        };
    };

    behaviors {
        dance_layer1_rgui: dance_layer1_rgui {
            compatible = "zmk,behavior-tap-dance";
            label = "DANCE_LAYER1_RGUI";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&kp RGUI>;
        };

        dance_rgui_layer4: dance_rgui_layer4 {
            compatible = "zmk,behavior-tap-dance";
            label = "DANCE_RGUI_LAYER4";
            #binding-cells = <0>;
            bindings = <&kp LGUI>, <&mo 4>;
        };

        dance_alt_layer3: dance_alt_layer3 {
            compatible = "zmk,behavior-tap-dance";
            label = "DANCE_ALT_LAYER3";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT>, <&mo 3>;
        };

        dance_layer2_layer3: dance_layer2_layer3 {
            compatible = "zmk,behavior-tap-dance";
            label = "DANCE_LAYER2_LAYER3";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&mo 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB            &kp Q  &kp W  &kp E               &kp R           &kp T        &kp Y    &kp U               &kp I                 &kp O    &kp P      &kp BACKSPACE
&kp LCTRL          &kp A  &kp S  &kp D               &kp F           &kp G        &kp H    &kp J               &kp K                 &kp L    &kp SEMI   &arrow_key_big
&dance_alt_layer3  &kp Z  &kp X  &kp C               &kp V           &kp B        &kp N    &kp M               &kp COMMA             &kp DOT  &kp SLASH  &kp BACKSLASH
                                 &dance_rgui_layer4  &kp LEFT_SHIFT  &kp SPACE    &kp RET  &dance_layer1_rgui  &dance_layer2_layer3
            >;
        };

        lower_layer {
            bindings = <
&trans  &kp GRAVE     &kp N7        &kp N8        &kp N9        &kp CARET      &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS         &kp BACKSPACE
&trans  &kp TILDE     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp DOLLAR     &kp LEFT          &kp DOWN           &kp UP                &kp RIGHT              &kp SINGLE_QUOTE  &arrow_key_small
&trans  &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERCENT    &kp STAR          &kp EQUAL          &kp COMMA             &kp DOT                &kp BACKSLASH     &trans
                                    &trans        &trans        &kp SPACE      &kp ENTER         &trans             &trans
            >;
        };

        raise_layer {
            bindings = <
&kp LS(TAB)               &kp LC(LS(LEFT_BRACKET))  &kp LC(LS(RIGHT_BRACKET))  &kp LC(LS(TAB))    &kp LC(TAB)        &kp LG(GRAVE)    &kp LA(LC(LS(A)))         &kp LA(LC(LS(B)))         &kp LA(LC(LS(T)))         &kp LA(LC(LS(S)))         &kp LA(LC(LS(E)))  &none
&kp LC(LA(LS(NUMBER_1)))  &kp LS(LA(MINUS))         &kp LS(LA(EQUAL))          &kp LC(LS(LA(K)))  &kp LS(LA(LC(J)))  &kp LC(LEFT)     &kp HOME                  &kp PAGE_DOWN             &kp PAGE_UP               &kp END                   &none              &none
&kp LS(LA(LC(NUMBER_2)))  &kp LC(LS(LA(MINUS)))     &kp LS(LA(LC(EQUAL)))      &kp LS(LA(K))      &kp LS(LA(J))      &kp LC(RIGHT)    &kp LS(LC(LA(NUMBER_3)))  &kp LS(LC(LA(NUMBER_4)))  &kp LC(LA(LS(NUMBER_5)))  &kp LS(LC(LA(NUMBER_6)))  &kp LS(LC(LA(X)))  &kp LS(LA(LC(SLASH)))
                                                                               &trans             &trans             &kp ESCAPE       &kp RET                   &trans                    &trans
            >;
        };

        tri_layer {
            bindings = <
&none  &none  &none  &none  &none  &none    &kp C_PLAY_PAUSE  &kp K_BACK  &kp K_NEXT  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE
&none  &none  &none  &none  &none  &none    &kp F1            &kp F2      &kp F3      &kp F4             &kp F5           &none
&none  &none  &none  &none  &none  &none    &kp F6            &kp F7      &kp F8      &kp F9             &kp F10          &none
                     &none  &none  &none    &none             &none       &none
            >;
        };

        left_hand {
            bindings = <
&kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_5))      &kp LG(NUMBER_7)  &kp LG(NUMBER_8)  &kp LG(NUMBER_9)  &none    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &out OUT_TOG
&kp LS(LG(NUMBER_4))  &kp LS(LG(LC(NUMBER_4)))  &kp LG(NUMBER_4)  &kp LG(NUMBER_5)  &kp LG(NUMBER_6)  &none    &none         &none         &none         &none         &none         &none
&none                 &kp LG(NUMBER_0)          &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &none    &none         &none         &none         &none         &none         &bt BT_CLR
                                                                  &none             &none             &none    &none         &none         &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
    };
};

